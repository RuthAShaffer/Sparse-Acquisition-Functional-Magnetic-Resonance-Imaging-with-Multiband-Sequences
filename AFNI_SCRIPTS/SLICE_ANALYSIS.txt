#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py"
echo "(version 5.01, August 22, 2016)"
echo "Modified by Ruth Shaffer"
echo "execution started: `date`"

# variables to supply
# $1 = experiment/test name
# $2 = starting slice (typically 0)
# $3 = ending slice/number of slices (minus 1 because start at 0)
# $4 = .nii full file name without nii extension (i.e. run3)

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 1 Dec 2015
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 1 Dec 2015)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# assign output directory name
set output_dir = $1.$4.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
	# do nothing
	echo output dir "$output_dir" already exists
else
	# create results and stimuli directories
	mkdir $output_dir
endif

# set list of slices
set slices = (`count -digits 1 $2 $3`) 
# count -digits 2 1 2 does first num = how many digits in each number (so 1 = 1,2…15; 2=01,02…15; 3=001,002…015), then 2nd and 3rd number are starting and ending points (inclusive) 

# set list of runs
set runs = (`count -digits 1 1 1`) # i.e. one run

# copy run to results dir
3dcopy $4.nii $output_dir/$4 # will copy it there and put it in afni format
cd $output_dir


# get info on number of timepoints (should be 20)
3dinfo -nt $4 > 3dinfo.$4.numberOfFrames.txt
3dinfo -fac $4 > 3dinfo.$4.scaleFactor.txt

# ================================== mask ==================================
# create 'full_mask' dataset (union mask) can change -dilate 0 in Automask and in mask_tool -dilate_input 1 -1!!!
foreach run ( $runs )
    3dAutomask -dilate 0 -prefix rm.mask_r$4 $4+orig
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+orig.HEAD -union -prefix full_mask.$4


# get the average per slice using the mask
foreach slice ( $slices )
	
	# Checking the average intensity of mask at given slice. 
	# If 0, then it’s empty in the slice because mask is all 1s and 0s for yes/no in mask, 
	# so if slice intensity equals 0, nothing in slice surviving mask
	3dmaskave -slices $slice $slice full_mask.$4+orig > slice.$slice.ifZero.emptyMaskAtSlice.txt 

	#store mean signal output
	set sliceMaskNotEmpty="`3dmaskave -slices $slice $slice -quiet full_mask.$4+orig`"
	echo mask average signal intensity "$sliceMaskNotEmpty"
	
	# if mean signal is 0, then no voxels survived mask (MAKE SURE COULD NEVER ROUND DOWN TO ZERO IF ONLY A FEW VOXELS SURVIVE!)
	if ($sliceMaskNotEmpty == 0) then
   		echo empty
		echo $slice "	" empty >> sliceBySliceMean_$4_FOR_RECORDS.txt
	else
		# checked all above functions and none discuss any scaling.
		# using 3dinfo -fac can look at scale factors; appear to be 0 for dataset (20; one for each sub brik is 0) and mask (output above)
		3dmaskave -slices $slice $slice -mask full_mask.$4+orig $4+orig > TR20Frames.$4.slice_$slice.txt 

		# get the average for the slice across all frames
		set meanSlice=`awk '{sum += $1} END {print sum/NR}' TR20Frames.$4.slice_$slice.txt`
		
		echo $slice "	" $meanSlice >> sliceBySliceMean_$4_FOR_RECORDS.txt
		echo $slice "	" $meanSlice >> sliceBySliceMean_$4_FOR_GRAPHING_NO_EMPTY_DATA_SLICES.txt

		
	endif
	
end

cd ../
